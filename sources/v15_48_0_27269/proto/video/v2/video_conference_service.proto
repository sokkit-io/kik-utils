syntax = "proto3";

package mobile.video.v2;

import "protobuf_validation.proto";
import "common/v2/model.proto";
import "video/v2/model.proto";

option objc_class_prefix = "KPBMobileVideoV2";
option go_package = "github.com/kikinteractive/xiphias-api-mobile/generated/go/video/v2;video";
option java_package = "com.kik.gen.video.v2";

service VideoConference {
    rpc GetIceServers(GetIceServersRequest) returns (GetIceServersResponse);
    rpc InitiateVideoConference(InitiateVideoConferenceRequest) returns (InitiateVideoConferenceResponse);
    rpc JoinVideoConference(JoinVideoConferenceRequest) returns (JoinVideoConferenceResponse);
    rpc UpdateIceCandidates(UpdateIceCandidatesRequest) returns (UpdateIceCandidatesResponse);
    rpc TriggerIceRestart(TriggerIceRestartRequest) returns (TriggerIceRestartResponse);
    rpc GetVideoConferenceSessionContents(GetVideoConferenceSessionContentsRequest) returns (GetVideoConferenceSessionContentsResponse);
    rpc NotifyVideoConferenceAlive(NotifyVideoConferenceAliveRequest) returns (NotifyVideoConferenceAliveResponse);
    rpc NotifyVideoConferenceTerminated(NotifyVideoConferenceTerminatedRequest) returns (NotifyVideoConferenceTerminatedResponse);
    rpc GetChatId(GetChatIdRequest) returns (GetChatIdResponse);
}

message GetIceServersRequest {
    
}

message GetIceServersResponse {
    Result result = 1;
    enum Result {
        OK = 0;
    }
    
    repeated common.video.v2.IceServer ice_servers = 2;
}

message InitiateVideoConferenceRequest {
    common.v2.ChatId chat_id = 1;
    common.video.v2.VideoConferenceId video_conference_id = 2;
    common.video.v2.WebRTCOffer webrtc_offer = 3;
}

message InitiateVideoConferenceResponse {
    Result result = 1;
    enum Result {
        OK = 0;
        CONFLICT = 1;
        NOT_SUPPORTED = 2;
    }
    
    common.video.v2.VideoConferenceId conflicting_video_conference_id = 2;
}

message JoinVideoConferenceRequest {
    common.v2.ChatId chat_id = 1;
    common.video.v2.VideoConferenceId video_conference_id = 2;
    common.video.v2.WebRTCAnswer webrtc_answer = 3;
}

message JoinVideoConferenceResponse {
    Result result = 1;
    enum Result {
        OK = 0;
        NOT_FOUND = 1;
    }
}

message UpdateIceCandidatesRequest {
    common.v2.ChatId chat_id = 1;
    common.video.v2.VideoConferenceId video_conference_id = 2;
    repeated common.video.v2.IceCandidate added_candidates = 3;
    repeated common.video.v2.IceCandidate removed_candidates = 4;
}

message UpdateIceCandidatesResponse {
    Result result = 1;
    enum Result {
        OK = 0;
        NOT_FOUND = 1;
    }
}

message TriggerIceRestartRequest {
    common.v2.ChatId chat_id = 1;
    common.video.v2.VideoConferenceId video_conference_id = 2;
    common.video.v2.WebRTCOffer webrtc_offer = 3;
}

message TriggerIceRestartResponse {
    Result result = 1;
    enum Result {
        OK = 0;
        NOT_FOUND = 1;
        USER_NOT_AUTHORIZED = 2;
    }
}

message GetVideoConferenceSessionContentsRequest {
    common.v2.ChatId chat_id = 1;
    common.video.v2.VideoConferenceId video_conference_id = 2;
}

message GetVideoConferenceSessionContentsResponse {
    Result result = 1;
    enum Result {
        OK = 0;
        NOT_FOUND = 1;
    }
    
    common.video.v2.VideoConferenceSessionContents session_contents = 2;
}

message NotifyVideoConferenceAliveRequest {
    common.v2.ChatId chat_id = 1;
    common.video.v2.VideoConferenceId video_conference_id = 2;
}

message NotifyVideoConferenceAliveResponse {
    Result result = 1;
    enum Result {
        OK = 0;
        NOT_FOUND = 1;
    }
}

message NotifyVideoConferenceTerminatedRequest {
    common.v2.ChatId chat_id = 1;
    common.video.v2.VideoConferenceId video_conference_id = 2;
}

message NotifyVideoConferenceTerminatedResponse {
    Result result = 1;
    enum Result {
        OK = 0;
        NOT_FOUND = 1;
    }
}

message GetChatIdRequest {
    common.v2.AccountId correspondent = 1;
}

message GetChatIdResponse {
    Result result = 1;
    enum Result {
        OK = 0;
        NOT_PERMITTED = 1;
    }
    
    common.v2.ChatId chat_id = 2;
}
