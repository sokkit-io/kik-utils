syntax = "proto3";

package mobile.kin.payment.v1;

import "protobuf_validation.proto";
import "common_model.proto";
import "common/v1/model.proto";
import "offer/v1/kik_offer_common.proto";
import "kin/payment/v1/payment_common.proto";
import "kin/authentication/v1/authentication_common.proto";

option go_package = "github.com/kikinteractive/xiphias-api-mobile/generated/go/kin/payment/v1;payment";
option java_package = "com.kik.kin.payment.rpc";

service FeaturePayment {
    rpc GetKikOfferJwt(GetKikOfferJwtRequest) returns (GetKikOfferJwtResponse);
    rpc ProcessKikOfferTransactionConfirmation(ProcessKikOfferTransactionConfirmationRequest) returns (ProcessKikOfferTransactionConfirmationResponse);
    rpc GetPayToUserJwt(GetPayToUserJwtRequest) returns (GetPayToUserJwtResponse);
    rpc ProcessPaymentToUser(ProcessPaymentToUserRequest) returns (ProcessPaymentToUserResponse);
    rpc GetUserSpendTransactionLimits(GetUserSpendTransactionLimitsRequest) returns (GetUserSpendTransactionLimitsResponse);
    rpc GetUsersReceiveTransactionLimits(GetUsersReceiveTransactionLimitsRequest) returns (GetUsersReceiveTransactionLimitsResponse);
}

message GetKikOfferJwtRequest {
    common.offer.v1.KikOfferIdOrUserOfferId offer_id = 1;
    common.offer.v1.UserOfferData user_offer_data = 2;
    common.v1.XiBareUserJidOrAliasJid recipient_jid = 3;
    common.kin.payment.v1.KinAmount amount = 4;
}

message GetKikOfferJwtResponse {
    Result result = 1;
    enum Result {
        OK = 0;
        REJECTED = 1;
    }
    
    RejectionReason rejection_reason = 2;
    enum RejectionReason {
        UNKNOWN = 0;
        USER_NOT_AUTHORIZED = 1;
        MISSING_ATTRIBUTE = 2;
        INVALID_ATTRIBUTE = 3;
        INVALID_OFFER = 4;
        OFFER_EXPIRED = 5;
        INVALID_FEATURE_DATA = 6;
        INVALID_ALIAS_JID = 7;
        MAX_SPEND_AMOUNT_EXCEEDED = 8;
        DAILY_SPEND_LIMIT_EXCEEDED = 9;
        DAILY_RECEIVE_LIMIT_EXCEEDED = 10;
    }
    
    common.v1.XiJWT offer_jwt = 3;
    common.offer.v1.KikUserOfferId user_offer_id = 4;
}

message ProcessKikOfferTransactionConfirmationRequest {
    common.v1.XiJWT payment_confirmation_jwt = 1;
    common.offer.v1.KikUserOfferId user_offer_id = 2;
}

message ProcessKikOfferTransactionConfirmationResponse {
    Result result = 1;
    enum Result {
        OK = 0;
        REJECTED = 1;
    }
    
    RejectionReason rejection_reason = 2;
    enum RejectionReason {
        UNKNOWN = 0;
        INVALID_OFFER = 1;
        OFFER_EXPIRED = 2;
        INVALID_JWT = 3;
        OFFER_JWT_MISMATCH = 4;
    }
}

message GetPayToUserJwtRequest {
    common.XiBareUserJid sender_user_jid = 1;
    common.v1.XiBareUserJidOrAliasJid recipient_jid = 2;
    common.kin.payment.v1.PaymentInfo payment_info = 3;
}

message GetPayToUserJwtResponse {
    Result result = 1;
    enum Result {
        OK = 0;
        REJECTED = 1;
    }
    
    RejectionReason rejection_reason = 2;
    enum RejectionReason {
        UNKNOWN = 0;
        INVALID_FEATURE = 1;
        INVALID_ALIAS_JID = 2;
        MAX_SPEND_AMOUNT_EXCEEDED = 3;
        DAILY_SPEND_LIMIT_EXCEEDED = 4;
        DAILY_RECEIVE_LIMIT_EXCEEDED = 5;
        USER_NOT_AUTHORIZED = 6;
    }
    
    common.kin.authentication.v1.OfferJwt pay_to_user_offer_jwt = 3;
}

message ProcessPaymentToUserRequest {
    common.XiBareUserJid sender_user_jid = 1;
    common.v1.XiBareUserJidOrAliasJid recipient_jid = 2;
    common.kin.payment.v1.PaymentInfo payment_info = 3;
    common.v1.XiJWT payment_confirmation_jwt = 4;
}

message ProcessPaymentToUserResponse {
    Result result = 1;
    enum Result {
        OK = 0;
        REJECTED = 1;
    }
    
    RejectionReason rejection_reason = 2;
    enum RejectionReason {
        UNKNOWN = 0;
        INVALID_FEATURE = 1;
        INVALID_JWT = 2;
        REQUEST_JWT_MISMATCH = 3;
    }
}

message GetUserSpendTransactionLimitsRequest {
    common.XiBareUserJid user_jid = 1;
    common.kin.payment.v1.Feature feature = 2;
}

message GetUserSpendTransactionLimitsResponse {
    Result result = 1;
    enum Result {
        OK = 0;
        REJECTED = 1;
    }
    
    RejectionReason rejection_reason = 2;
    enum RejectionReason {
        UNKNOWN = 0;
        INVALID_FEATURE = 1;
        USER_NOT_AUTHORIZED = 2;
    }
    
    TransactionAmountLimits transaction_amount_limits = 3;
}

message GetUsersReceiveTransactionLimitsRequest {
    repeated common.v1.XiBareUserJidOrAliasJid user_jids = 1;
    common.kin.payment.v1.Feature feature = 2;
}

message GetUsersReceiveTransactionLimitsResponse {
    Result result = 1;
    enum Result {
        OK = 0;
        REJECTED = 1;
    }
    
    RejectionReason rejection_reason = 2;
    enum RejectionReason {
        UNKNOWN = 0;
        INVALID_FEATURE = 1;
        INVALID_ALIAS_JID = 2;
        USER_NOT_AUTHORIZED = 3;
    }
    
    repeated UserTransactionLimits user_transaction_limits = 3;
}

message UserTransactionLimits {
    common.v1.XiBareUserJidOrAliasJid user_jid = 1;
    TransactionAmountLimits transaction_amount_limits = 2;
}

message TransactionAmountLimits {
    common.kin.payment.v1.KinAmount max_amount = 1;
    common.kin.payment.v1.KinAmount daily_limit = 2;
    common.kin.payment.v1.KinAmount remaining_daily_limit = 3;
}
